let tru = \t.\f.t;
let fls = \t.\f.f;
let and = \a.\b.test a (test b tru fls) fls
let or = \a.\b.test a tru (test b tru fls)
let not = \a.test a fls tru
let test = \l.\m.\n.(l m n);
let nil = \f.tru;
let cons = \h.\t.\f.(f h t);
let head = \l.l (\h.\t.h);
let tail = \l.l (\h.\t.t);
let null = \l.l (\h.\t.fls);
let zero = (\f.\x.x);
let succ = (\n.\f.\x.f(n f x));
let pred = (\n.\f.\x.n(\g.\h.h(g f))(\u.x)(\u.u));
let plus = (\m.\n.\f.\x. m f (n f x));
let mult = (\m.\n.\f.\x. m (n f) x);
let isZero = (\n.n(\x.fls) tru);
let fix = \f.(\x.f(\y.x x y))(\x.f(\y.x x y));
let g = \fct.\n. test (isZero n) (succ zero) (mult n (fct (pred n)));
let factorial = fix g;
