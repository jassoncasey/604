Packet Grammar

========== top-level ==========

program:
  empty
  data-declaration
  function-declaration

function-declaration:
  annotation function-definition

annotation:
  identifier "::" type-expression ";"

function-definition:
  identifier parameter-list "=" function-body ";"

function-body:
  case-expression

data-declaration:
  pdu-declaration
  adt-declaration




========== expression ==========
   FIXME - Add binary operators for uint
case-expression:
  "case" identifier "of" "{" case-clauses "}"

case-clause-seq:
  case-clause-seq ";" case-clause

case-clause:
  typename parameter-seq "->" case-expression

if-expression:
  "if" conditional-expression "then" expression "else" expression

conditional-expression:
  conditional-expression "and" neg-expression
  conditional-expression "or"  neg-expression

neg-expression:
  "not" relational-expr
  relational-expr

relational-expr:
  relational-expr "<" additive-expr
  relational-expr ">" additive-expr
  relational-expr "<=" additive-expr
  relational-expr "<=" additive-expr

additive-expr:
  additive-expr "+" multiplicative-expr
  additive-expr "-" multiplicative-expr

negative-expr:
  "-" multiplicative-expr
  multiplicative-expr

multiplicative-expr:
  multiplicative-expr "*" applicative-expr
  multiplicative-expr "/" applicative-expr
  multiplicative-expr "%" applicative-expr

applicative-expr:
  primary
  Application primary

primary:
  identifier
  literal
  pduConstructor
  (expression)

pduConstructor:
  typename "{" pduConstructorFieldSeq "}"

pduConstructorFieldSeq:
  pduConstructorFieldSeq "," pduConstructorField
  pduConstructorField

pduConstructorField:
  identifier ":" expression



========== type-expression ==========

type-expression:
  type-expression -> type-term
  type-term

type-term:
  (type-expression)
  [type-expression]
  user-type
  Nat
  Bool
  Char
  identifier

user-type:
  typename    // parameter-sequence only supported with generic adts

type-variable:
  identifier

type:
  simple-type
  [type]
  type -> type
  (type)

simple-type
  Bool
  Int
  Char
  identifier


typesig-map:
  typesig "->" typesig-map
  typesig

typesig:
  (typesig-map)
  [typesig-map]
  simple-type

simple-type:
  "Int"
  "Bool"
  "Char"
  typename



========== data-declaration ==========

pdu-declaration:
  "pdu" typename "=" "{" pdu-decl-field-seq "}"

pdu-decl-field-seq:
  pdu-decl-field-seq "," pdu-decl-field
  pdu-decl-field

pdu-decl-field:
  identifier ":" type-expression

adt-declaration:
  "data" identifier "=" adt-constructor-sequence ";"

adt-constructor-sequence:
  adt-constructor-sequence "|" adt-constructor
  adt-constructor

adt-constructor:
  typename type-sequence

type-sequence:
  type-sequence type-term
  type-term
  empty



========== basics ==========

typename:
  upper-case ++ alpha-numeric

parameter-sequence:
  parameter-sequence identifier
  identifier
  empty

identifier:
  lowercase ++ alpha-numeric

literal:
  natural
  boolean
  character-literal
  string-literal
  bit-string,hex...

character-literal:
  "'" character "'"

string-literal:
  "\"" string "\""

boolean:
  True
  False














Operator precedence
  higher on list means higher precedence

- (negate)
*,/,%  multiplicative
+,-
&,|,^,~
<<,>>
>,<,>=,<=
not
or,and
: (append)
++ (concat)